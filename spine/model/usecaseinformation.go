// Package ns_p contains models for http://docs.eebus.org/spine/xsd/v1
package model

// Code generated by github.com/andig/xsd2go. DO NOT EDIT.

import "github.com/evcc-io/eebus/util"

// UseCaseActorType type
type UseCaseActorType UseCaseActorEnumType

// UseCaseActorEnumType type
type UseCaseActorEnumType string

const (
	UseCaseActorEnumTypeEV UseCaseActorEnumType = "EV"
)

// UseCaseNameType type
type UseCaseNameType UseCaseNameEnumType

// UseCaseNameEnumType type
type UseCaseNameEnumType string

const (
	UseCaseNameEnumTypeMeasurementOfElectricityDuringEVCharging         UseCaseNameEnumType = "measurementOfElectricityDuringEvCharging"
	UseCaseNameEnumTypeOptimizationOfSelfConsumptionDuringEVCharging    UseCaseNameEnumType = "optimizationOfSelfConsumptionDuringEvCharging"
	UseCaseNameEnumTypeOverloadProtectionByEVChargingCurrentCurtailment UseCaseNameEnumType = "overloadProtectionByEvChargingCurrentCurtailment"
	UseCaseNameEnumTypeCoordinatedEVCharging                            UseCaseNameEnumType = "coordinatedEvCharging"
	UseCaseNameEnumTypeEVCommissioningAndConfiguration                  UseCaseNameEnumType = "evCommissioningAndConfiguration"
	UseCaseNameEnumTypeEVSECommissioningAndConfiguration                UseCaseNameEnumType = "evseCommissioningAndConfiguration"
	UseCaseNameEnumTypeEVChargingSummary                                UseCaseNameEnumType = "evChargingSummary"
	UseCaseNameEnumTypeEVStateOfCharge                                  UseCaseNameEnumType = "evStateOfCharge"
)

// UseCaseScenarioSupportType type
type UseCaseScenarioSupportType uint

// UseCaseSupportType complex type
type UseCaseSupportType struct {
	UseCaseName      *UseCaseNameType             `json:"useCaseName,omitempty"`
	UseCaseVersion   *SpecificationVersionType    `json:"useCaseVersion,omitempty"`
	UseCaseAvailable *bool                        `json:"useCaseAvailable,omitempty"`
	ScenarioSupport  []UseCaseScenarioSupportType `json:"scenarioSupport,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseSupportType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseSupportType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// UseCaseSupportElementsType complex type
type UseCaseSupportElementsType struct {
	UseCaseName      *ElementTagType `json:"useCaseName,omitempty"`
	UseCaseVersion   *ElementTagType `json:"useCaseVersion,omitempty"`
	UseCaseAvailable *ElementTagType `json:"useCaseAvailable,omitempty"`
	ScenarioSupport  *ElementTagType `json:"scenarioSupport,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseSupportElementsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseSupportElementsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// UseCaseSupportSelectorsType complex type
type UseCaseSupportSelectorsType struct {
	UseCaseName     *UseCaseNameType            `json:"useCaseName,omitempty"`
	UseCaseVersion  *SpecificationVersionType   `json:"useCaseVersion,omitempty"`
	ScenarioSupport *UseCaseScenarioSupportType `json:"scenarioSupport,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseSupportSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseSupportSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// UseCaseInformationDataType complex type
type UseCaseInformationDataType struct {
	Address        *FeatureAddressType  `json:"address,omitempty"`
	Actor          *UseCaseActorType    `json:"actor,omitempty"`
	UseCaseSupport []UseCaseSupportType `json:"useCaseSupport,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseInformationDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseInformationDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// UseCaseInformationDataElementsType complex type
type UseCaseInformationDataElementsType struct {
	Address        *FeatureAddressElementsType `json:"address,omitempty"`
	Actor          *ElementTagType             `json:"actor,omitempty"`
	UseCaseSupport *UseCaseSupportElementsType `json:"useCaseSupport,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseInformationDataElementsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseInformationDataElementsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// UseCaseInformationListDataType complex type
type UseCaseInformationListDataType struct {
	UseCaseInformationData []UseCaseInformationDataType `json:"useCaseInformationData,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseInformationListDataType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseInformationListDataType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}

// UseCaseInformationListDataSelectorsType complex type
type UseCaseInformationListDataSelectorsType struct {
	Address        *FeatureAddressType          `json:"address,omitempty"`
	Actor          *UseCaseActorType            `json:"actor,omitempty"`
	UseCaseSupport *UseCaseSupportSelectorsType `json:"useCaseSupport,omitempty"`
}

// MarshalJSON is the SHIP serialization marshaller
func (m UseCaseInformationListDataSelectorsType) MarshalJSON() ([]byte, error) {
	return util.Marshal(m)
}

// UnmarshalJSON is the SHIP serialization unmarshaller
func (m *UseCaseInformationListDataSelectorsType) UnmarshalJSON(data []byte) error {
	return util.Unmarshal(data, &m)
}
